{"id":"../node_modules/@restart/hooks/esm/useCommittedRef.js","dependencies":[{"name":"/home/taskmonk/Projects/NPM-Package/component-bazzer/example/package.json","includedInParent":true,"mtime":1717219727430},{"name":"/home/taskmonk/Projects/NPM-Package/component-bazzer/.babelrc","includedInParent":true,"mtime":1717215631604},{"name":"/home/taskmonk/Projects/NPM-Package/component-bazzer/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1717220432127},{"name":"react","loc":{"line":1,"column":34},"parent":"/home/taskmonk/Projects/NPM-Package/component-bazzer/node_modules/@restart/hooks/esm/useCommittedRef.js","resolved":"/home/taskmonk/Projects/NPM-Package/component-bazzer/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nvar _default = exports.default = useCommittedRef;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":12,"column":0}},{"name":"useCommittedRef","generated":{"line":19,"column":9},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":12,"column":9}},{"generated":{"line":19,"column":24},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":12,"column":0}},{"name":"value","generated":{"line":19,"column":25},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":12,"column":25}},{"generated":{"line":19,"column":30},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":32},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":12,"column":32}},{"generated":{"line":20,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":2}},{"name":"ref","generated":{"line":20,"column":8},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":8}},{"generated":{"line":20,"column":11},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":11}},{"generated":{"line":20,"column":14},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":14}},{"name":"value","generated":{"line":20,"column":33},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":21}},{"generated":{"line":20,"column":38},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":14}},{"generated":{"line":20,"column":39},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":13,"column":2}},{"generated":{"line":21,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":14,"column":2}},{"generated":{"line":21,"column":24},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":14,"column":12}},{"generated":{"line":21,"column":30},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":14,"column":18}},{"name":"ref","generated":{"line":22,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":4}},{"name":"ref","generated":{"line":22,"column":4},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":4}},{"generated":{"line":22,"column":7},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":7}},{"name":"current","generated":{"line":22,"column":8},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":8}},{"generated":{"line":22,"column":15},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":4}},{"name":"value","generated":{"line":22,"column":18},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":18}},{"generated":{"line":22,"column":23},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":15,"column":4}},{"generated":{"line":23,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":16,"column":3}},{"generated":{"line":23,"column":3},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":14,"column":2}},{"generated":{"line":23,"column":5},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":16,"column":5}},{"name":"value","generated":{"line":23,"column":6},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":16,"column":6}},{"generated":{"line":23,"column":11},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":16,"column":5}},{"generated":{"line":23,"column":12},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":14,"column":2}},{"generated":{"line":24,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":17,"column":2}},{"name":"ref","generated":{"line":24,"column":9},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":17,"column":9}},{"generated":{"line":24,"column":12},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":17,"column":2}},{"generated":{"line":25,"column":0},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":18,"column":1}},{"name":"useCommittedRef","generated":{"line":27,"column":33},"source":"../node_modules/@restart/hooks/esm/useCommittedRef.js","original":{"line":19,"column":15}}],"sources":{"../node_modules/@restart/hooks/esm/useCommittedRef.js":"import { useEffect, useRef } from 'react';\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;"},"lineCount":null}},"error":null,"hash":"f2226dba89ca87a32b2cac5d20b1f27b","cacheData":{"env":{}}}